@page "/routetracking"

@using MauiBlazor.Entities;
@using MauiBlazor.Helpers;
@using MauiBlazor.Interfaces;
@using Blazorise;
@using MauiBlazor.Models;
@using MauiBlazor.Views;
@using Microsoft.Extensions.Logging;
@using System.Collections.ObjectModel;
@using System.Text
@using System.Text.Json
@using CommunityToolkit.Maui.Storage
@using static MauiBlazor.Helpers.ExecutionHelper;

@inject IRouteTrackingPageService RouteTrackingPageService;
@inject ILogger<RouteTrackingPage> Logger

<h1>Route</h1>
<br />

<Div Style="font-size: 0.65rem">
    <Table Striped>
        <TableHeader ThemeContrast="ThemeContrast.Dark" Style="font-size: 0.9rem">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Coord.</TableHeaderCell>
                <TableHeaderCell>Time</TableHeaderCell>
                <TableHeaderCell>Abs.</TableHeaderCell>
                <TableHeaderCell>Rel.</TableHeaderCell>
            </TableRow>
        </TableHeader>

        <TableBody>
            @for (var i = 0; i < _routeLocations.Count; i++)
            {
                var number = i + 1;
                var location = _routeLocations[i];
                <TableRow Clicked="@(() => OnLocationClickedAsync(location.RouteLocation))">
                    <TableRowHeader>@number</TableRowHeader>
                    <TableRowCell>@location.Coordinates</TableRowCell>
                    <TableRowCell>@location.CreationDate</TableRowCell>
                    <TableRowCell>@location.AbsoluteDuration</TableRowCell>
                    <TableRowCell>@location.RelativeDuration</TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
</Div>
<Div>
    <Button Color="Color.Primary" Clicked="@OnAddLocationAsync" Disabled="@IsAuto">Add Location</Button>
    <Button Color="Color.Primary" Clicked="@OnShowRouteAsync" Disabled="@(!HasRoute || IsAuto)">Show Route</Button>
    <Button Color="Color.Primary" Clicked="@OnResetAsync" Disabled="@IsAuto">Reset</Button>
</Div>
<Div Class="mt-1">
    <Button Color="Color.Primary" Clicked="@OnStartAuto" Disabled="@IsAuto">Start Auto</Button>
    <Button Color="Color.Primary" Clicked="@OnStopAuto" Disabled="@(!IsAuto)">Stop Auto</Button>
</Div>
<Div Class="mt-1">
    <Button Color="Color.Primary" Clicked="@OnSaveAsync" Disabled="@(!HasRoute || IsAuto)">Save To File</Button>
    <Button Color="Color.Primary" Clicked="@OnLoadAsync" Disabled="@IsAuto">Load From File</Button>
</Div>
<br />

@code {
    private const string _saveFileName = "route-tracking.json";
    private readonly ObservableCollection<RouteLocationViewModel> _routeLocations = new();
    private IDispatcherTimer? _timer;

    private bool HasRoute => _routeLocations.Any();
    private bool IsAuto => _timer is not null;

    protected override async Task OnInitializedAsync() => await ExecuteErrorHandledAsync(async () => await FetchLocationsAsync(), Logger);

    private async Task OnAddLocationAsync() => await ExecuteErrorHandledAsync(async () => await AddLocationAsync(true), Logger);

    private async Task OnLocationClickedAsync(RouteLocation routeLocation) => await ExecuteErrorHandledAsync(async () =>
    {
        if (Application.Current?.MainPage is null) return;

        await Application.Current.MainPage.Navigation.PushAsync(new MapPage(routeLocation));
    }, Logger);

    private async Task OnShowRouteAsync() => await ExecuteErrorHandledAsync(async () =>
    {
        if (!HasRoute || Application.Current?.MainPage is null) return;

        await Application.Current.MainPage.Navigation.PushAsync(new MapPage(_routeLocations.Select(l => l.RouteLocation).ToList()));
    });

    private async Task OnResetAsync() => await ExecuteErrorHandledAsync(async () =>
    {
        await RouteTrackingPageService.DeleteLocationsAsync();
        await FetchLocationsAsync();
        await NotificationHelper.ShowSnackMessageAsync("Locations removed");
    }, Logger);

    private void OnStartAuto()
    {
        if (Application.Current is null) return;

        _timer = Application.Current.Dispatcher.CreateTimer();
        _timer.Interval = TimeSpan.FromMinutes(1);
        _timer.Tick += async (_, _) => await AddAutoLocationAsync();
        _timer.Start();
    }

    private void OnStopAuto()
    {
        _timer?.Stop();
        _timer = null;
    }

    private async Task OnSaveAsync() => await ExecuteErrorHandledAsync(async () =>
                                             {
                                                 var status = await Permissions.CheckStatusAsync<Permissions.StorageWrite>();
                                                 if (status != PermissionStatus.Granted)
                                                 {
                                                     status = await Permissions.RequestAsync<Permissions.StorageWrite>();
                                                     if (status != PermissionStatus.Granted) return;
                                                 }

                                                 var json = JsonSerializer.Serialize(_routeLocations);
                                                 using var stream = new MemoryStream(Encoding.Default.GetBytes(json));
                                                 var result = await FileSaver.Default.SaveAsync(_saveFileName, stream, CancellationToken.None);
                                                 if (!result.IsSuccessful && result.Exception is not null)
                                                 {
                                                     Logger.LogError(result.Exception, result.Exception.Message);
                                                 }

                                                 var message = result.IsSuccessful ? "Routes saved" : "Routes could not be saved";
                                                 await NotificationHelper.ShowSnackMessageAsync(message);
                                             }, Logger);

    private async Task OnLoadAsync() => await ExecuteErrorHandledAsync(async () =>
                                             {
                                                 var status = await Permissions.CheckStatusAsync<Permissions.StorageRead>();
                                                 if (status != PermissionStatus.Granted)
                                                 {
                                                     status = await Permissions.RequestAsync<Permissions.StorageRead>();
                                                     if (status != PermissionStatus.Granted) return;
                                                 }

                                                 var result = await FolderPicker.Default.PickAsync(CancellationToken.None);
                                                 if (!result.IsSuccessful) return;

                                                 var filePath = Path.Combine(result.Folder.Path, _saveFileName);
                                                 if (!File.Exists(filePath))
                                                 {
                                                     await NotificationHelper.ShowSnackMessageAsync("No routes saved yet");

                                                     return;
                                                 }

                                                 var json = await File.ReadAllTextAsync(filePath);
                                                 var savedLocations = JsonSerializer.Deserialize<ObservableCollection<RouteLocationViewModel>>(json);
                                                 if (savedLocations is not null && savedLocations.Any())
                                                 {
                                                     SetLocations(savedLocations);
                                                 }
                                             }, Logger);

    private async Task FetchLocationsAsync() => await ExecuteErrorHandledAsync(async () =>
    {
        var locations = await RouteTrackingPageService.GetLocationsAsync();
        SetLocations(GetLocationViewModels(locations));
    }, Logger);

    private async Task AddLocationAsync(bool showSnack)
    {
        var location = await LocationHelper.GetLocationAsync();
        if (location is null) return;

        await RouteTrackingPageService.SaveLocationAsync(location);
        await FetchLocationsAsync();
        if (showSnack)
        {
            await NotificationHelper.ShowSnackMessageAsync("Location added");
        }
    }

    private async Task AddAutoLocationAsync() => await ExecuteErrorHandledAsync(async () => await AddLocationAsync(false), Logger);

    private void SetLocations(IEnumerable<RouteLocationViewModel> locations)
    {
        _routeLocations.Clear();
        foreach (var location in locations)
        {
            _routeLocations.Add(location);
        }
    }

    private static IEnumerable<RouteLocationViewModel> GetLocationViewModels(ICollection<RouteLocation> locations)
    {
        if (!locations.Any()) return Enumerable.Empty<RouteLocationViewModel>();

        var ordered = locations.OrderBy(l => l.CreationDate).ToList();
        var startTime = ordered.First().CreationDate;

        return ordered.Select((routeLocation, i) =>
        {
            var absoluteTime = routeLocation.CreationDate - startTime;
            var relativeTime = i == 0 ? TimeSpan.Zero : routeLocation.CreationDate - ordered[i - 1].CreationDate;

            return new RouteLocationViewModel(routeLocation, absoluteTime, relativeTime);
        });
    }

}